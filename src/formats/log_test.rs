use crate::formats::log::{Log, LogFile, LogFileHeader};

const log1: [u8; 34] = [
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ts
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // id
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // key length
    0x01, // key
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // value length
    0x0A, // value
];
const log2: [u8; 34] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ts
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // id
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // key length
    0x02, // key
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // value length
    0x0B, // value
];
const log3: [u8; 34] = [
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ts
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // id
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // key length
    0x03, // key
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // value length
    0x0C, // value
];

const log_header: [u8; 24] = [
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // magic
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // attributes
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // entry_count
          // logs
];

#[test]
fn test_log_format() {
    let l1 = Log::try_from(&log1[..]).unwrap();
    let l2 = Log::try_from(&log2[..]).unwrap();
    let l3 = Log::try_from(&log3[..]).unwrap();
    let lh = LogFileHeader::try_from(&log_header[..]).unwrap();
    let log_file = LogFile {
        header: lh,
        logs: vec![l1, l2, l3],
    };
    let log_file_bytes = bincode::serialize(&log_file).unwrap();
    let log_file2 = LogFile::try_from(&log_file_bytes[..]).unwrap();
    assert_eq!(log_file, log_file2);
}
