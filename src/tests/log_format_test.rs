use crate::formats::log::{
    IdIndex, IndexFileHeader, Log, LogFileHeader, TsIndex, INDEX_HEADER, TS_INDEX_HEADER,
};

pub(crate) const LOG1: [u8; 34] = [
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ts
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // id
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // key length
    0x01, // key
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // value length
    0x0A, // value
];
pub(crate) const LOG2: [u8; 34] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ts
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // id
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // key length
    0x02, // key
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // value length
    0x0B, // value
];
pub(crate) const LOG3: [u8; 34] = [
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ts
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // id
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // key length
    0x03, // key
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // value length
    0x0C, // value
];

pub(crate) const LOG_FILE_HEADER: [u8; 24] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // magic
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // attributes
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* entry_count
           * logs */
];

pub(crate) const INDEX_FILE_HEADER: [u8; 8] = [
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // magic
];
pub(crate) const INDEX1: [u8; 16] = [
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // id
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // offset
];
pub(crate) const INDEX2: [u8; 16] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // id
    0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // offset
];
pub(crate) const INDEX3: [u8; 16] = [
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // id
    0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // offset
];

pub(crate) const TS_INDEX_FILE_HEADER: [u8; 8] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // magic
];
pub(crate) const TIMESTAMP1: [u8; 16] = [
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ts
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // offset
];
pub(crate) const TIMESTAMP2: [u8; 16] = [
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ts
    0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // offset
];
pub(crate) const TIMESTAMP3: [u8; 16] = [
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ts
    0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // offset
];

#[test]
fn test_log_format() {
    let l1 = Log::try_from(&LOG1[..]).unwrap();
    let l2 = Log::try_from(&LOG2[..]).unwrap();
    let l3 = Log::try_from(&LOG3[..]).unwrap();
    let lh = LogFileHeader::try_from(&LOG_FILE_HEADER[..]).unwrap();

    let idx1 = IdIndex::try_from(&INDEX1[..]).unwrap();
    let idx2 = IdIndex::try_from(&INDEX2[..]).unwrap();
    let idx3 = IdIndex::try_from(&INDEX3[..]).unwrap();
    let idx_h = IndexFileHeader::try_from(&INDEX_FILE_HEADER[..]).unwrap();

    let ts_idx1 = TsIndex::try_from(&TIMESTAMP1[..]).unwrap();
    let ts_idx2 = TsIndex::try_from(&TIMESTAMP2[..]).unwrap();
    let ts_idx3 = TsIndex::try_from(&TIMESTAMP3[..]).unwrap();
    let ts_idx_h = IndexFileHeader::try_from(&TS_INDEX_FILE_HEADER[..]).unwrap();

    assert_eq!(
        Log {
            ts: 1,
            id: 1,
            key: vec![1],
            value: vec![10]
        },
        l1
    );
    assert_eq!(
        Log {
            ts: 2,
            id: 2,
            key: vec![2],
            value: vec![11]
        },
        l2
    );
    assert_eq!(
        Log {
            ts: 3,
            id: 3,
            key: vec![3],
            value: vec![12]
        },
        l3
    );

    assert_eq!(
        LogFileHeader {
            magic_number: 0,
            attributes: 0,
            entry_count: 3
        },
        lh
    );

    assert_eq!(IdIndex { id: 1, offset: 24 }, idx1);
    assert_eq!(IdIndex { id: 2, offset: 58 }, idx2);
    assert_eq!(IdIndex { id: 3, offset: 92 }, idx3);
    assert_eq!(INDEX_HEADER, idx_h);

    assert_eq!(TsIndex { ts: 1, offset: 24 }, ts_idx1);
    assert_eq!(TsIndex { ts: 2, offset: 58 }, ts_idx2);
    assert_eq!(TsIndex { ts: 3, offset: 92 }, ts_idx3);
    assert_eq!(TS_INDEX_HEADER, ts_idx_h);
}
